#!/usr/bin/env php
<?php

declare(strict_types = 1);

use Amp\Loop;
use Monolog\Logger;
use Psr\Log\LogLevel;
use ServiceBus\Application\ServiceBusKernel;
use ServiceBus\Transport\Amqp\AmqpExchange;
use ServiceBus\Transport\Amqp\AmqpQueue;
use ServiceBus\Transport\Common\QueueBind;
use ServiceBus\Transport\Common\TopicBind;
use ServiceBus\Transport\Amqp\AmqpTransportLevelDestination;
use ServiceBus\Transport\Module\PhpInnacleTransportModule;
use ServiceBus\Application\DependencyInjection\Compiler\Logger\StdOutLoggerCompilerPass;
use ServiceBus\Application\Bootstrap;
use ServiceBus\Sagas\Module\SagaModule;
use ServiceBus\Scheduler\Contract\EmitSchedulerOperation;
use ServiceBus\Scheduler\Module\SchedulerModule;
use ServiceBus\Storage\Common\DatabaseAdapter;
use ServiceBus\Storage\Module\SqlStorageModule;

/** Use https://github.com/vishnubob/wait-for-it/blob/master/wait-for-it.sh instead sleep() function for RabbitMQ */
\sleep(8);

include __DIR__ . '/../vendor/autoload.php';

/** @noinspection PhpUnhandledExceptionInspection */
$bootstrap = Bootstrap::withDotEnv(__DIR__ . '/../.env')
    ->useCustomCacheDirectory(__DIR__ . '/../cache')
    ->addCompilerPasses(
        new StdOutLoggerCompilerPass(
            Logger::toMonologLevel(\getenv('LOG_LEVEL') ?: LogLevel::DEBUG)
        )
    )
    ->addExtensions(new \AppExtension())
    ->enableAutoImportMessageHandlers([__DIR__ . '/../src'])
    ->applyModules(
        SqlStorageModule::postgreSQL((string) \getenv('DATABASE_CONNECTION_DSN')),
        SagaModule::withSqlStorage(DatabaseAdapter::class)->enableAutoImportSagas([__DIR__ . '/../src']),
        SchedulerModule::rabbitMqWithSqlStorage(DatabaseAdapter::class),
        new PhpInnacleTransportModule(
            (string) \getenv('TRANSPORT_CONNECTION_DSN'),
            (string) \getenv('SENDER_DESTINATION_TOPIC'),
            (string) \getenv('SENDER_DESTINATION_TOPIC_ROUTING_KEY')
        )
    );

/** @noinspection PhpUnhandledExceptionInspection */
$container = $bootstrap->boot();

Loop::run(
    static function() use ($container): \Generator
    {
        try
        {
            $mainExchange = AmqpExchange::direct((string) \getenv('TRANSPORT_TOPIC'), true);
            $mainQueue    = AmqpQueue::default((string) \getenv('TRANSPORT_QUEUE'), true);

            $kernel = (new ServiceBusKernel($container))
                ->useDefaultStopSignalHandler(3);

            yield $kernel->createQueue(
                $mainQueue,
                new QueueBind($mainExchange, (string) \getenv('TRANSPORT_ROUTING_KEY'))
            );

            /** Scheduler exchange */
            yield $kernel->createTopic(
                AmqpExchange::delayed((string) \getenv('SCHEDULER_TOPIC')),
                new TopicBind($mainExchange, \getenv('TRANSPORT_ROUTING_KEY'))
            );

            /** Add custom message route for scheduled operations */
            $kernel->registerDestinationForMessages(
                new AmqpTransportLevelDestination(
                    (string) \getenv('SCHEDULER_TOPIC'),
                    (string) \getenv('TRANSPORT_ROUTING_KEY')
                ),
                EmitSchedulerOperation::class
            );

            yield $kernel->run($mainQueue);
        }
        catch(\Throwable $throwable)
        {
            echo $throwable->getMessage(), \PHP_EOL;
            exit;
        }
    }
);
